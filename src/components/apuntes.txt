

Parametros en JS

Props: son las propiedads que le pasamos a un copomponent como los parametros de una funcón en JS Vanilla. SON DE SÓLO LECTURA.

se pasan como un atributo en HTML 

function App() {
    let edad = 41;
    let nombre = "Martin";
    return (
        <>
            <Header />
            <Main nombre={nombre} /> !!! acá se usa y se le puden pasar varibles o datos.
            <ItemListContainer />
            <Footer />
        </>
    );
}


para que react lo entienda hay que decirle acá usa JS y eso se hace con {}

y se usa en el componente como: 

function Main(props) {
    return (
        <main>
            <h2>Bienvenido {props.nombre}!</h2> !!!! acá es decir que se accede como un objeto porque es un objeto
            <h3>Tengo</h3>
        </main>
    );
}

------------------------------------------------------------

Clase 05


    Reglas de los componentes: 

1- Todos los componentes son funciones 
2-Todos los componentes arracnan en mayuscula
3-Todos lso componente tienen que retornar un elemento
4-Todos lso componentes pueden recibir N cantidad de props de cualquier valor
5- Todos los componentes pueden tener estado y ciclo de vida
6- No tienen cilco de vida real sino que son funciones que se vuelven a ejecturar por completo si: 
        - se modifica el estado  
        - se reciben nuevas props   
        - se reinicia el padre
        - se modifica el contexto

Ciclo de vida: 

1) Nacer que se ejecuto o rendirizo por primera vez o se está montando (se muestra en pantalla). MOUNT es la palabra oficial.
2) Si se modifica o se actualiza: UPDATE.
3) Morir se desmonta, desaparece. UNMOUNT.

STATE: son varialbes que viven adentro de un componente que cuando se modifican, React lo vuela rendirizar (vuevle a renderizar todas las partes dónde están las variables). 


en react onClick es un addEventLisener 

entonces un <button onClick={()=>{ console.log("click") }}

sino se puede poner un click en el botón con una función:

const handleClick = () =Z {
    console.log("click")
}

<button onClick={handleClick}>aumentar</button>

React propone un virtual DOM.

Ir al DOM es muy costoso. Por eso React da el concepto de estado. A las variables las hace como status. Si uno modifica ese estado el componente se vuelve a redibujar. Por cambiar el estado se modifica el virtual DOM y va a acumlando todos los cambios. Te puede renderizar el componente o sólo una parte (esto lo vemos mejor más adelante).

Sólo por cambiar el estado se va a modicar el virtual DOM. El estado es algo que está en cambio. Puede ser por el usuario o algo por ejemplo como un formulario, o el carrito de compras, o los productos. No todos los componentes van a tener estado, porque quizás no lo necesiten. Un componente que no lo necesite sería uno representacional (como el footer). El container suele estar asociado con un estado, y le suele pasar al componente representacional. 

Para tener --estado-- en un --componente-- se necesita un HOOK. Un hook es una función. 

Hook: adaptan un componente funcional que tenga funcionales que antes no tenía. Todos los Hooks arrancan con use. Después de importarlo lo tenes que usar. Ningún hook puede estar afuera de un componente. Ningún puede estar en una situación condional o de bucle. 

- useState y useEffect ya vienen instalados Reack. Uno se puede crear sus propios hooks y hay librerias que viene con hooks.

Primer hook es el useState. Siempre retorna un array con dos elementos, la primera es el valor del estado y la segunda es la función que tendría que ejectura si lo quisieras cambiar. 

CLASS: props + state + lifcycle

Hooks: Reglas generales para todos.

1. Se importan de react así (ejemplo con useState): import {useState} from "react". Si queremos uno más le ponemos coma y agregamos
2. Todos son funciones. Se tienen que ejecutar. No se importa en un archivo que no se usa. 
3. Ningún Hook puede estar afuera de un componente. 
4. Ningún Hook puede estar en una situación condicional (if) o de bucle (while).

--useState da un retorno: un array con dos elementos: 1) el valor áctual de tu estado 2) la función que vos tendrías que ejecutar si lo qusieras cambiar. 


------------------------------------------------------------------------------------------------------------

6. Promises, asincronía y MAP

Imagenes

se ponen con la etiqueta <img />
y se les pone el src. Las levanta de la carpeta public. 
Si se las pone en otra carpeta hay que navegar a esa carpeta. 


Los estados siempre quedan con el último valor. 

Las funciones tiene que estar 

------------ UseEffect -------------------

Suelen ir pedidos a una api rest, conectarte a un servidor. Se usan para cosas que tardan mucho en el tiempo, porque queres que primero el usuario vea algo y después traes lo otro. No tiene retorno. Con lo cual no sirve para ponerlo en un a variable. 

El use effect toma dos parametros el a es una función y el b es un array. El primer parametro es obligatorio, el segundo es opcional. 

(
setTimeout toma dos parametros, una función y milisegundos. 
)

------MAP-----------

El map es un tiene un callback, donde es la variable y el indice. Reever. 

---------Promesas-------------

Promesas: son objetos que prometen una funcionalidad que dura en el tiempo, pero te "avisan" con su método .then() cuando terminó todo bien o con su método .catch() cuando terminó todo mal. Son encadenables pueden haber muchos .then() y .catch().







